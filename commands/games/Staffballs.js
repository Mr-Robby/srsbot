const {Command} = require('discord.js-commando');
const {MessageEmbed} = require('discord.js');
module.exports = class StaffballsCommand extends Command {
    constructor(client) {
        super(client, {
            name: 'throw',
            group: '–∏–≥—Ä—É–ª—å–∫–∏',
            memberName: 'throw',
            description: '–ö–∏–¥–∞–π—Å—è –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ –≤ –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π!',
            examples: ['throw'],
            argsCount: 2,
            argsType: 'multiple'
        });

        this.variants = {
            results: {
                negative: [
                    '**{{user}}** –∫–∏–¥–∞–µ—Ç {{thing}} –≤ {{otherUser}} –∏ –ø—Ä–æ–º–∞—Ö–∏–≤–∞–µ—Ç—Å—è!',
                    '**{{user}}** —à–≤—ã—Ä—è–µ—Ç {{thing}} –≤ {{otherUser}} –∏ –ø—Ä–æ–º–∞—Ö–∏–≤–∞–µ—Ç—Å—è!',
                    '**{{user}}** –Ω–∞–ø—Ä—è–≥—Å—è –∏ –∫–∏–Ω—É–ª {{thing}} –≤ {{otherUser}}, –Ω–æ –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è!',
                    '**{{user}}** –∫–∏–¥–∞–µ—Ç {{thing}} –≤ {{otherUser}}, –Ω–æ —Ä–∏–∫–æ—à–µ—Ç–æ–º –ø–æ–ø–∞–¥–∞–µ—Ç –≤ <@{{somebody}}>!',
                    '**{{user}}** —à–≤—ã—Ä—è–µ—Ç {{thing}} –≤ {{otherUser}}, –Ω–æ —Ä–∏–∫–æ—à–µ—Ç–æ–º –ø–æ–ø–∞–¥–∞–µ—Ç –≤ <@{{somebody}}>!',
                    '**{{user}}** –Ω–∞–ø—Ä—è–≥—Å—è –∏ –∫–∏–Ω—É–ª {{thing}} –≤ {{otherUser}}, –Ω–æ —Ä–∏–∫–æ—à–µ—Ç–æ–º –ø–æ–ø–∞–ª –≤ <@{{somebody}}>!',
                    '**{{user}}** –∫–∏–¥–∞–µ—Ç {{thing}} –≤ {{otherUser}}, –Ω–æ —Ä–∏–∫–æ—à–µ—Ç–æ–º –ø–æ–ø–∞–¥–∞–µ—Ç <@{{somebody}}> –ø—Ä—è–º–æ –≤ {{bodypart}}!',
                    '**{{user}}** —à–≤—ã—Ä—è–µ—Ç {{thing}} –≤ {{otherUser}}, –Ω–æ —Ä–∏–∫–æ—à–µ—Ç–æ–º –ø–æ–ø–∞–¥–∞–µ—Ç <@{{somebody}}> –ø—Ä—è–º–æ –≤ {{bodypart}}!',
                    '**{{user}}** –Ω–∞–ø—Ä—è–≥—Å—è –∏ –∫–∏–Ω—É–ª {{thing}} –≤ {{otherUser}}, –Ω–æ —Ä–∏–∫–æ—à–µ—Ç–æ–º –ø–æ–ø–∞–ª <@{{somebody}}> –ø—Ä—è–º–æ –≤ {{bodypart}}!'
                ],
                positive: [
                    '**{{user}}** –∫–∏–¥–∞–µ—Ç {{thing}} –∏ –ø–æ–ø–∞–¥–∞–µ—Ç  –≤ {{otherUser}}!',
                    '**{{user}}** —à–≤—ã—Ä—è–µ—Ç {{thing}} –∏ –ø–æ–ø–∞–¥–∞–µ—Ç  –≤ {{otherUser}}!',
                    '**{{user}}** –Ω–∞–ø—Ä—è–≥—Å—è –∏ –∫–∏–Ω—É–ª {{thing}}, –ø–æ–ø–∞–≤  –≤ {{otherUser}}!',
                    '**{{user}}** –∫–∏–¥–∞–µ—Ç {{thing}} –∏ –ø–æ–ø–∞–¥–∞–µ—Ç {{otherUser}} –ø—Ä—è–º–æ –≤ {{bodypart}}!',
                    '**{{user}}** —à–≤—ã—Ä—è–µ—Ç {{thing}} –∏ –ø–æ–ø–∞–¥–∞–µ—Ç {{otherUser}} –ø—Ä—è–º–æ –≤ {{bodypart}}!',
                    '**{{user}}** –Ω–∞–ø—Ä—è–≥—Å—è –∏ –∫–∏–Ω—É–ª {{thing}}, –ø–æ–ø–∞–≤ {{otherUser}} –ø—Ä—è–º–æ –≤ {{bodypart}}!'
                ]
            },
            bodyParts: [
                '–ø—Ä–∞–≤—ã–π –≥–ª–∞–∑',
                '–ª–µ–≤—ã–π –≥–ª–∞–∑',
                '—Ä–æ—Ç',
                '–Ω–æ—Å',
                '–ª–µ–≤–æ–µ —É—Ö–æ',
                '–ø—Ä–∞–≤–æ–µ —É—Ö–æ',
                '–ª–µ–≤—É—é —Ä—É–∫—É',
                '–ø—Ä–∞–≤—É—é —Ä—É–∫—É',
                '–ª–µ–≤—ã–π —Å–æ—Å–æ–∫',
                '–ø—Ä–∞–≤—ã–π —Å–æ—Å–æ–∫',
                '–∂–∏–≤–æ—Ç',
                '—Å–ø–∏–Ω—É',
                '–ø—É–ø',
                '–ø–∏—Å—é–Ω',
                '–ø–æ–ø—É',
                '–ø—Ä–∞–≤—É—é –Ω–æ–≥—É',
                '–ª–µ–≤—É—é –Ω–æ–≥—É',
                '–ø—è—Ç–∫—É'
            ]
        };

        this.randomInteger = function (min, max) {
            let rand = min + Math.random() * (max + 1 - min);
            rand = Math.floor(rand);
            return rand;
        };

        this.getAllMembers = function (members, message) {
            let allMembers = [];
            let mentions = message.mentions.members;
            members.forEach((item) => {
                if (!item.user.bot) {
                    if(mentions.length > 0) {
                        mentions.forEach((user) => {
                            if(user.user.id !== item.user.id) {
                                allMembers.push(
                                    {
                                        userNick: item.user.username,
                                        userId: item.user.id
                                    }
                                )
                            }
                        })
                    } else {
                        allMembers.push(
                            {
                                userNick: item.user.username,
                                userId: item.user.id
                            }
                        )
                    }
                }
            });
            return allMembers;
        };

        this.getActiveMembers = function (members, message) {
            let activeMembers = [];
            members.forEach((item) => {
                if (!item.user.bot && item.user.id !== message.author.id && item.user.presence.status !== 'offline') {
                    activeMembers.push(
                        {
                            userNick: item.user.username,
                            userId: item.user.id
                        }
                    )
                }
            });
            return activeMembers;
        };

        this.getRandomDecision = function () {
            let propertyArray = Object.getOwnPropertyNames(this.variants.results);
            let randomProperty = propertyArray[this.randomInteger(0, propertyArray.length - 1)];
            return this.variants.results[randomProperty];
        };

        this.formatMessage = function (message, data) {
            return message.replace(/{{user}}/g, data.username).replace(/{{thing}}/g, data.thing)
                .replace(/{{otherUser}}/g, data.otherUser).replace(/{{somebody}}/g, data.somebody)
                .replace(/{{bodypart}}/g, this.variants.bodyParts[this.randomInteger(0, this.variants.bodyParts.length - 1)]);
        }
    }

    run(message) {
        let positiveOrNegative, resultMessage, resultMessageNum, formattedResultMessage, textData = {};

        let args = message.parseArgs(message.argString);

        let members = message.guild.members;
        let activeMembers = this.getActiveMembers(members, message);
        let allMembers = this.getAllMembers(members, message);
        let activeMembersCount = activeMembers.length;

        let throwThing = args[0] || '—Å–Ω–µ–∂–æ–∫';
        let targetUser = args[1] || '<@' + allMembers[this.randomInteger(0, allMembers.length - 1)].userId + '>';

        if (activeMembersCount > 0) {
            positiveOrNegative = this.getRandomDecision();
            resultMessageNum = this.randomInteger(0, positiveOrNegative.length - 1);
        } else {
            positiveOrNegative = this.variants.results['negative'];
            resultMessageNum = this.randomInteger(0, 2);
        }

        resultMessage = positiveOrNegative[resultMessageNum];
        textData.username = message.author.username;
        textData.thing = throwThing;
        textData.otherUser = targetUser;
        textData.somebody = allMembers.length > 0 ? allMembers[this.randomInteger(0, allMembers.length - 1)].userId : '—Å–µ–±–µ';

        formattedResultMessage = this.formatMessage(resultMessage, textData);


        const embed = new MessageEmbed()
            .setTitle('üí£ üí£ üí£ üí£')
            .setDescription(formattedResultMessage)
            .setFooter(message.author.username, message.author.displayAvatarURL())
            .setTimestamp()
            .setColor(0xC2185B);
        message.delete();
        return message.say(embed);
    }
};